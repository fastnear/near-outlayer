name: offchainvm-testnet

services:
  postgres:
    image: postgres:14-alpine
    container_name: offchainvm-postgres-testnet
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TESTNET:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_TESTNET:-offchainvm}
    ports:
      - "127.0.0.1:${POSTGRES_EXTERNAL_PORT_TESTNET:-5432}:5432"
    volumes:
      - postgres_data_testnet:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: offchainvm-redis-testnet
    command: redis-server --requirepass ${REDIS_PASSWORD_TESTNET:-redis123}
    ports:
      - "127.0.0.1:${REDIS_EXTERNAL_PORT_TESTNET:-6379}:6379"
    volumes:
      - redis_data_testnet:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD_TESTNET:-redis123}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  coordinator:
    build:
      context: ./coordinator
      dockerfile: ../docker/Dockerfile.coordinator
    container_name: offchainvm-coordinator-testnet
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./coordinator/.env.testnet
    ports:
      - "${COORDINATOR_EXTERNAL_PORT_TESTNET:-8080}:8080"
    volumes:
      - wasm_cache_testnet:/var/offchainvm/wasm
    # Note: For keystore access from coordinator container:
    # - macOS/Windows: Use KEYSTORE_BASE_URL=http://host.docker.internal:8081
    # - Linux: Use KEYSTORE_BASE_URL=http://172.17.0.1:8081
    #   Linux also requires UFW firewall rule:
    #   sudo ufw allow from 172.16.0.0/12 to any port 8081 && sudo ufw reload

volumes:
  postgres_data_testnet:
  redis_data_testnet:
  wasm_cache_testnet:
